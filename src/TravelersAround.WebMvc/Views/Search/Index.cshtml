@model TravelersAround.ServiceProxy.ViewModels.SearchView

@{
    ViewBag.Title = "Look for travelers around you";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Travelers around you</h2>

<div>
    @using (Html.BeginForm())
    {
        
        @Html.ValidationSummary(true)

            <div class="editor-field">
                @Html.EditorFor(model => model.IncludeOfflineTravelers)
                @Html.LabelFor(model => model.IncludeOfflineTravelers)
                @Html.ValidationMessageFor(model => model.IncludeOfflineTravelers)
            </div>

            <div>
                <input type="submit" value="Search" />
            </div>
    }
</div>
<div class="main-area">
    @if (Model.Travelers.Entities.Count == 0)
    {
        <p>It seems that currently now there are no travelers around you</p>
    }
    <table>
    @foreach (var traveler in Model.Travelers.Entities)
    {
        <tr>
            <td>
                <img class="profile_pic" src="@Url.Action("LoadPicture", "Profile", new { id = traveler.TravelerID })" alt="@String.Concat(traveler.Firstname, " ", traveler.Lastname)" />
            </td>
            <td>
                <p>@traveler.Firstname @traveler.Lastname</p>
                <p>@(DateTime.Now.Year - DateTime.Parse(traveler.Birthdate).Year), @traveler.Gender</p>
                <p>@traveler.City, @traveler.Country</p>
            </td>
            <td>
                @traveler.StatusMessage
            </td>
            <td>
                <a href="@Url.Action("Add", "Friends", new { id = traveler.TravelerID })">+</a>
                <a href="@Url.Action("Send", "Messages", new { id = traveler.TravelerID })">Send message</a>
            </td>
        </tr>
    }
    </table>
</div>


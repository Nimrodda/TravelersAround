@model TravelersAround.ServiceProxy.ViewModels.ProfileUpdateView

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm("UploadPicture", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div>
        <div class="profilePicture">
            <img class="profile_pic" src="@Url.Action("LoadPicture","Profile", new { id = Model.TravelerID})" alt="Profile Picture" />
        </div>
        <input type="file" name="uploadedFile"  />
        @Html.ValidationMessage("uploadedFile")    
    </div>
    <div>
        <input type="submit" value="Upload" />
    </div>
}

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>ProfileUpdateView</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Firstname)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Firstname)
            @Html.ValidationMessageFor(model => model.Firstname)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Lastname)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Lastname)
            @Html.ValidationMessageFor(model => model.Lastname)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Birthdate)
        </div>
        <div class="editor-field">
            <input type="text" name="Birthdate" value="@DateTime.Parse(Model.Birthdate).ToShortDateString()" />
            @Html.ValidationMessageFor(model => model.Birthdate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.StatusMessage)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.StatusMessage)
            @Html.ValidationMessageFor(model => model.StatusMessage)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Gender)
        </div>
        <div class="editor-field">
            @if (Model.Gender.ToLower().Equals("m"))
            {
                <input type="radio" name="Gender" id="genderMale1" value="M" checked="checked"/>
                <label for="genderMale1">Male</label>
                <input type="radio" name="Gender" id="genderFemale1" value="F"/>
                <label for="genderFemale1">Female</label>
            }
            else
            {
                <input type="radio" name="Gender" id="genderMale2" value="M" />
                <label for="genderMale2">Male</label>
                <input type="radio" name="Gender" id="genderFemale2" value="F" checked="checked"/>
                <label for="genderFemale2">Female</label>
            }
            @Html.ValidationMessageFor(model => model.Gender)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.IsAvailable)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.IsAvailable)
            @Html.ValidationMessageFor(model => model.IsAvailable)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

